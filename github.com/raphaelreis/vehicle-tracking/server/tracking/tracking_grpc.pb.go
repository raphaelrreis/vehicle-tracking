// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/tracking.proto

package tracking

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VehicleTrackingService_StreamLocation_FullMethodName = "/tracking.VehicleTrackingService/StreamLocation"
)

// VehicleTrackingServiceClient is the client API for VehicleTrackingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VehicleTrackingServiceClient interface {
	StreamLocation(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[VehicleLocation], error)
}

type vehicleTrackingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVehicleTrackingServiceClient(cc grpc.ClientConnInterface) VehicleTrackingServiceClient {
	return &vehicleTrackingServiceClient{cc}
}

func (c *vehicleTrackingServiceClient) StreamLocation(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[VehicleLocation], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VehicleTrackingService_ServiceDesc.Streams[0], VehicleTrackingService_StreamLocation_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, VehicleLocation]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VehicleTrackingService_StreamLocationClient = grpc.ServerStreamingClient[VehicleLocation]

// VehicleTrackingServiceServer is the server API for VehicleTrackingService service.
// All implementations must embed UnimplementedVehicleTrackingServiceServer
// for forward compatibility.
type VehicleTrackingServiceServer interface {
	StreamLocation(*Empty, grpc.ServerStreamingServer[VehicleLocation]) error
	mustEmbedUnimplementedVehicleTrackingServiceServer()
}

// UnimplementedVehicleTrackingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVehicleTrackingServiceServer struct{}

func (UnimplementedVehicleTrackingServiceServer) StreamLocation(*Empty, grpc.ServerStreamingServer[VehicleLocation]) error {
	return status.Errorf(codes.Unimplemented, "method StreamLocation not implemented")
}
func (UnimplementedVehicleTrackingServiceServer) mustEmbedUnimplementedVehicleTrackingServiceServer() {
}
func (UnimplementedVehicleTrackingServiceServer) testEmbeddedByValue() {}

// UnsafeVehicleTrackingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VehicleTrackingServiceServer will
// result in compilation errors.
type UnsafeVehicleTrackingServiceServer interface {
	mustEmbedUnimplementedVehicleTrackingServiceServer()
}

func RegisterVehicleTrackingServiceServer(s grpc.ServiceRegistrar, srv VehicleTrackingServiceServer) {
	// If the following call pancis, it indicates UnimplementedVehicleTrackingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VehicleTrackingService_ServiceDesc, srv)
}

func _VehicleTrackingService_StreamLocation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VehicleTrackingServiceServer).StreamLocation(m, &grpc.GenericServerStream[Empty, VehicleLocation]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VehicleTrackingService_StreamLocationServer = grpc.ServerStreamingServer[VehicleLocation]

// VehicleTrackingService_ServiceDesc is the grpc.ServiceDesc for VehicleTrackingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VehicleTrackingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tracking.VehicleTrackingService",
	HandlerType: (*VehicleTrackingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamLocation",
			Handler:       _VehicleTrackingService_StreamLocation_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/tracking.proto",
}
